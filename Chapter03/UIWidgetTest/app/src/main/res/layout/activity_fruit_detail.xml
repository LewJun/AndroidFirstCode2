<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:fitsSystemWindows="true"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.example.uiwidgettest.appcompats.FruitDetailActivity">

    <!--1 实现标题栏部分，这里使用 CoordinatorLayout来作为最外层布局-->
    <android.support.design.widget.AppBarLayout
        android:fitsSystemWindows="true"
        android:id="@+id/appbar_layout"
        android:layout_width="match_parent"
        android:layout_height="250dp">

        <!--
        给collapsing_toolbar使用深色主题@style/ThemeOverlay.AppCompat.Dark.ActionBar
        app:contentScrim 属性 用于指定 CollapsingToolbarLayout 在趋于折叠状态以及折叠之后的背景色，
         其实 Collapsing-ToolbarLayout 在折叠之后就是一个普通的 Toolbar，那么背景色肯定应该是 colorPrimary 了
        scroll表示 CollapsingToolbarLayout会随着水果内容详情的滚动一起滚动， exitUntilCollapsed 表示
        当 CollapsingToolbarLayout随着滚动完成折叠之后就保留在界面上，不再移出屏幕。
        -->
        <android.support.design.widget.CollapsingToolbarLayout
            android:fitsSystemWindows="true"
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
            app:contentScrim="?attr/colorPrimary"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

            <!--
            layout_collapseMode指定当前控件在 CollapsingToolbarLayout折叠过程中的折叠模式
             Toolbar指定成 pin，表示在折叠的过程中位置始终保持不变
             ImageView 指定成 parallax，表示会在折叠的过程中产生一定的错位偏移，这种模式的视觉效果会非常好。
            -->
            <ImageView
                android:fitsSystemWindows="true"
                android:id="@+id/iv_fruit_pic"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                app:layout_collapseMode="parallax" />

            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin">

            </android.support.v7.widget.Toolbar>
        </android.support.design.widget.CollapsingToolbarLayout>
    </android.support.design.widget.AppBarLayout>

    <!--2 实现水果详情页部分-->
    <!--scrollView 允许使用滚动的方式来查看屏幕外的内容，
    NestedScrollView在此基础之上还增加了嵌套响应滚动事件的功能

    由于 CoordinatorLayout本
身已经可以响应滚动事件了，因此我们在它的内部就需要使用 NestedScrollView或 RecyclerView
这样的布局。另外，这里还通过 app:layout_behavior 属性指定了一个布局行为，这和之前在
RecyclerView中的用法是一模一样的。
    -->
    <android.support.v4.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">
        <!--scrollView 和NestedScrollView内部只允许一个直接子控件-->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical">

            <android.support.v7.widget.CardView
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginBottom="15dp"
                android:layout_marginLeft="15dp"
                android:layout_marginRight="15dp"
                android:layout_marginTop="35dp"
                app:cardCornerRadius="4dp">

                <TextView
                    android:id="@+id/fruit_content_text"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_margin="10dp" />
            </android.support.v7.widget.CardView>
        </LinearLayout>
    </android.support.v4.widget.NestedScrollView>

    <!--
    layout_anchor 锚点指向appbar_layout，这样fab就会出现在appbar_layout的区域内，
    然后又使用layout_anchorGravity设置fab在appbar_layout的区域内的右下方
    -->
    <android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:src="@drawable/ic_comment"
        app:layout_anchor="@id/appbar_layout"
        app:layout_anchorGravity="bottom|end" />
</android.support.design.widget.CoordinatorLayout>
